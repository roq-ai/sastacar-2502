generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model booking {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start_date  DateTime @db.Date
  end_date    DateTime @db.Date
  total_price Int
  user_id     String   @db.Uuid
  car_id      String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  car         car      @relation(fields: [car_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model car {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  model           String       @db.VarChar(255)
  brand           String       @db.VarChar(255)
  color           String       @db.VarChar(255)
  year            Int
  price_per_day   Int
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  booking         booking[]
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?       @db.VarChar(255)
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  user_id     String        @db.Uuid
  tenant_id   String        @db.VarChar(255)
  car         car[]
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  team_member team_member[]
}

model team_member {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String       @db.Uuid
  organization_id String       @db.Uuid
  joined_at       DateTime     @default(now()) @db.Timestamp(6)
  left_at         DateTime?    @db.Timestamp(6)
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  booking      booking[]
  organization organization[]
  team_member  team_member[]
}
